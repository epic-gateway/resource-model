.set-tag: &set-tag
- |
  if [ -n "${CI_COMMIT_TAG}" ] ; then
    # If this build is from a git tag, use that as the docker tag.
    export TAG_SPECIFIC="${CI_COMMIT_TAG}"
  else
    # If this build is from a branch, use the name and sha as the
    # docker tag.
    export TAG_SPECIFIC="${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}"
  fi

manifest:
  image: golang:1.15.9-buster

  before_script:
  - *set-tag
  - apt-get update
  - apt-get install -y gettext-base
  # this lets the CI runner clone any repo that the pushing user can
  # clone. We need to clone private repos, e.g., epic/true-ingress
  # since this project depends on them.
  - echo "machine gitlab.com login gitlab-ci-token password ${CI_JOB_TOKEN}" > ~/.netrc
  - go get sigs.k8s.io/controller-tools/cmd/controller-gen@v0.5.0

  script:
  - make SUFFIX=${TAG_SPECIFIC} all
  - 'curl --silent --show-error --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file deploy/epic-resource-model.yaml "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/manifest/${TAG_SPECIFIC}/epic-resource-model.yaml"'

  artifacts:
    paths:
      - config
      - deploy/*.yaml

docker:
  image: docker:20.10.5
  services:
  - docker:20.10.5-dind

  before_script:
  - *set-tag
  - apk add make
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

  script:
  - make SUFFIX=${TAG_SPECIFIC} GITLAB_USER=gitlab-ci-token GITLAB_PASSWORD=${CI_JOB_TOKEN} docker-build docker-push
