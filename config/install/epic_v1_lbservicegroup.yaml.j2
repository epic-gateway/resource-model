---
apiVersion: epic.acnodal.io/v1
kind: LBServiceGroup
metadata:
  namespace: {{ group_org_ns }}
  name: samplehttp
  labels:
    epic.acnodal.io/owning-account: {{ group_org_name }}
    epic.acnodal.io/owning-serviceprefix: {{ service_prefix_name }}
    app.kubernetes.io/component: lbservicegroup
    app.kubernetes.io/part-of: epic
spec:
{% raw %}
  can-be-shared: yes
  endpoint-template:
    dnsName: "{{.LBName}}.{{.LBSGName}}.client.acnodal.io"
    recordTTL: 180
    recordType: A
  envoy-replica-count: 1
  envoy-template:
    envoyAPI: v3
    serialization: yaml
    nodeID: SET_BY_EPIC
    envoyResources:
      endpoints:
      - name: SET_BY_EPIC
        value: |
          cluster_name: {{.ClusterName}}
          {{- if .Endpoints}}
          endpoints:
          - lb_endpoints:
          {{- range .Endpoints}}
            - endpoint:
                address:
                  socket_address:
                    address: {{.Spec.Address}}
                    protocol: {{.Spec.Port.Protocol | ToUpper}}
                    port_value: {{.Spec.Port.Port}}
          {{- end}}
          {{- end}}
      clusters:
      - name: SET_BY_EPIC
        value: |
          name: {{.ClusterName}}
          connect_timeout: 2s
          type: EDS
          eds_cluster_config:
            eds_config:
              resource_api_version: V3
              api_config_source:
                api_type: GRPC
                transport_api_version: V3
                grpc_services:
                - envoy_grpc:
                    cluster_name: eds-server
          lb_policy: ROUND_ROBIN
          health_checks:
          - interval: 5s
            timeout: 5s
            no_traffic_interval: 5s
            unhealthy_threshold: 3
            healthy_threshold: 3
            http_health_check:
              path: /ready
      listeners:
      - name: SET_BY_EPIC
        value: |
          name: {{.PortName}}
          address:
            socket_address:
              address: 0.0.0.0
              port_value: {{.Port}}
              protocol: {{.Protocol | ToUpper}}
          filter_chains:
            - filters:
              - name: envoy.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  stat_prefix: {{ .ServiceName }}
                  route_config:
                    name: local_route
                    virtual_hosts:
                      - name: purelb
                        domains: ["*"]
                        routes:
                          - match:
                              prefix: "/"
                            route:
                              weighted_clusters:
                                total_weight: {{ .TotalWeight }}
                                clusters:
                                {{- range $i, $cl := .Clusters}}
                                - name: {{$cl}}
                                  weight: {{ $.ClusterWeight }}
                                {{- end}}
                  http_filters:
                    - name: envoy.filters.http.router
{% endraw %}
---
apiVersion: epic.acnodal.io/v1
kind: LBServiceGroup
metadata:
  namespace: {{ group_org_ns }}
  name: gatewayhttp
  labels:
    epic.acnodal.io/owning-account: {{ group_org_name }}
    epic.acnodal.io/owning-serviceprefix: {{ service_prefix_name }}
    app.kubernetes.io/component: lbservicegroup
    app.kubernetes.io/part-of: epic
spec:
{% raw %}
  can-be-shared: yes
  endpoint-template:
    dnsName: "{{.LBName}}.{{.LBSGName}}.client.acnodal.io"
    recordTTL: 180
    recordType: A
  envoy-replica-count: 1
  envoy-template:
    envoyAPI: v3
    serialization: yaml
    nodeID: SET_BY_EPIC
    envoyResources:
      endpoints:
      - name: SET_BY_EPIC
        value: |
          cluster_name: {{.ClusterName}}
          {{- if .Endpoints}}
          endpoints:
          - lb_endpoints:
          {{- range .Endpoints}}
            - endpoint:
                address:
                  socket_address:
                    address: {{.Spec.Address}}
                    protocol: {{.Spec.Port.Protocol | ToUpper}}
                    port_value: {{.Spec.Port.Port}}
          {{- end}}
          {{- end}}
      clusters:
      - name: SET_BY_EPIC
        value: |
          name: {{.ClusterName}}
          connect_timeout: 2s
          type: EDS
          eds_cluster_config:
            eds_config:
              resource_api_version: V3
              api_config_source:
                api_type: GRPC
                transport_api_version: V3
                grpc_services:
                - envoy_grpc:
                    cluster_name: eds-server
          lb_policy: ROUND_ROBIN
          health_checks:
          - interval: 5s
            timeout: 5s
            no_traffic_interval: 5s
            unhealthy_threshold: 3
            healthy_threshold: 3
            http_health_check:
              path: /ready
      listeners:
      - name: SET_BY_EPIC
        value: |
          name: {{.PortName}}
          address:
            socket_address:
              address: 0.0.0.0
              port_value: {{.Port}}
              protocol: {{.Protocol | ToUpper}}
          filter_chains:
          - filters:
            - name: envoy.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: {{ .ServiceName }}
                route_config:
                  name: local_route
                  virtual_hosts:
                  {{- range .Routes }}
                  {{- $route := .Spec.HTTP }}
                  {{- range $route.Hostnames | HostnameOrDefault }}
                  - name: "{{ . }}"
                    domains:
                    - "{{ . }}"
                    {{- if $route.Rules}}
                    routes:
                    {{- range $route.Rules}}
                    - route:
                        weighted_clusters:
                          clusters:
                          {{- range .BackendRefs}}
                          - name: {{ .Name }}
                            weight: {{ .Weight }}
                          {{- end }}
                          total_weight: {{ .BackendRefs | RefWeightsTotal }}
                      {{- if .Matches }}
                      match:
                      {{- range .Matches }}
                        {{- if .Path }}
                        prefix: "{{ .Path.Value }}"
                        {{- end }}
                        {{- if .Headers }}
                        headers:
                        {{- range .Headers }}
                        - name: "{{ .Name }}"
                          string_match:
                          {{- if .Type | HeaderTypeRegex }}
                            safe_regex:
                              google_re2: {}
                              regex: "{{ .Value }}"
                          {{- else }}
                            exact: "{{ .Value }}"
                          {{- end }}
                        {{- end }}
                        {{- end }}
                      {{- end }}
                      {{- end }}
                    {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- end }}
                http_filters:
                - name: envoy.filters.http.router
{% endraw %}
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: selfsigned
  namespace: {{ group_org_ns }}
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: lbsg-https-cert
  namespace: {{ group_org_ns }}
spec:
  secretName: lbsg-https-cert
  commonName: epic-self-signed
  issuerRef:
    kind: Issuer
    name: selfsigned
---
apiVersion: epic.acnodal.io/v1
kind: LBServiceGroup
metadata:
  namespace: {{ group_org_ns }}
  name: samplehttps
  labels:
    epic.acnodal.io/owning-account: {{ group_org_name }}
    epic.acnodal.io/owning-serviceprefix: {{ service_prefix_name }}
    app.kubernetes.io/component: lbservicegroup
    app.kubernetes.io/part-of: epic
spec:
{% raw %}
  can-be-shared: yes
  endpoint-template:
    dnsName: "{{.LBName}}.{{.LBSGName}}.client.acnodal.io"
    recordTTL: 180
    recordType: A
  envoy-replica-count: 1
  envoy-template:
    envoyAPI: v3
    serialization: yaml
    nodeID: SET_BY_EPIC
    envoyResources:
      clusters:
      - name: SET_BY_EPIC
        value: |
          name: {{.ClusterName}}
          connect_timeout: 2s
          type: EDS
          eds_cluster_config:
            eds_config:
              resource_api_version: V3
              api_config_source:
                api_type: GRPC
                transport_api_version: V3
                grpc_services:
                - envoy_grpc:
                    cluster_name: eds-server
          lb_policy: ROUND_ROBIN
          health_checks:
          - interval: 5s
            timeout: 5s
            no_traffic_interval: 5s
            unhealthy_threshold: 3
            healthy_threshold: 3
            http_health_check:
              path: /ready
      endpoints:
      - name: SET_BY_EPIC
        value: |
          cluster_name: {{.ClusterName}}
          {{- if .Endpoints}}
          endpoints:
          - lb_endpoints:
          {{- range .Endpoints}}
            - endpoint:
                address:
                  socket_address:
                    address: {{.Spec.Address}}
                    protocol: {{.Spec.Port.Protocol | ToUpper}}
                    port_value: {{.Spec.Port.Port}}
          {{- end}}
          {{- end}}
      listeners:
      - name: SET_BY_EPIC
        value: |
          name: {{.PortName}}
          address:
            socket_address:
              address: 0.0.0.0
              port_value: {{.Port}}
              protocol: {{.Protocol | ToUpper}}
          filter_chains:
            - filters:
              - name: envoy.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  stat_prefix: ingress_http
                  route_config:
                    name: local_route
                    virtual_hosts:
                      - name: purelb
                        domains: ["*"]
                        routes:
                          - match:
                              prefix: "/"
                            route:
                              weighted_clusters:
                                total_weight: {{ .TotalWeight }}
                                clusters:
                                {{- range $i, $cl := .Clusters}}
                                - name: {{$cl}}
                                  weight: {{ $.ClusterWeight }}
                                {{- end}}
                  http_filters:
                    - name: envoy.filters.http.router
              transport_socket:
                name: envoy.transport_socket.tls
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
                  common_tls_context:
                    tls_certificate_sds_secret_configs:
                      - name: lbsg-https-cert
                        sds_config:
                          resource_api_version: V3
                          ads: {}
{% endraw %}
      secrets:
      - name: lbsg-https-cert
        ref:
          name: lbsg-https-cert
          namespace: {{ group_org_ns }}
