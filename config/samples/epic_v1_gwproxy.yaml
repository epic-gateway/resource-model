apiVersion: epic.acnodal.io/v1
kind: GWProxy
metadata:
  name: a044f348-f80c-4ac0-b911-6ed45e37994a
  namespace: epic-root
  labels:
    epic.acnodal.io/owning-lbservicegroup: gatewayhttp
    epic.acnodal.io/owning-serviceprefix: default
spec:
  clientRef:
    clusterID: puregw-sample
    namespace: puregw
    name: gwproxy-sample
    uid: a044f348-f80c-4ac0-b911-6ed45e37994a
  display-name: adhoc-cli
  endpoints:
  - dnsName: gatewayhttp-gwproxy-sample.gatewayhttp.client.acnodal.io
    recordTTL: 180
    recordType: A
    targets:
    - 192.168.79.2
  envoy-replica-count: 1
  envoy-template:
    envoyAPI: v3
    envoyResources:
      endpoints:
      - name: SET_BY_EPIC
        value: |
          cluster_name: {{.ClusterName}}
          {{- if .Endpoints}}
          endpoints:
          - lb_endpoints:
          {{- range .Endpoints}}
            - endpoint:
                address:
                  socket_address:
                    address: {{.Spec.Address}}
                    protocol: {{.Spec.Port.Protocol | ToUpper}}
                    port_value: {{.Spec.Port.Port}}
          {{- end}}
          {{- end}}
      clusters:
      - name: SET_BY_EPIC
        value: |
          # FIXME: iterate here instead of in the Go code, i.e., pass
          # all of the GWRoutes into the template in one shot
          name: {{.ClusterName}}
          connect_timeout: 2s
          type: EDS
          eds_cluster_config:
            eds_config:
              resource_api_version: V3
              api_config_source:
                api_type: GRPC
                transport_api_version: V3
                grpc_services:
                - envoy_grpc:
                    cluster_name: eds-server
          lb_policy: ROUND_ROBIN
          health_checks:
          - interval: 5s
            timeout: 5s
            no_traffic_interval: 5s
            unhealthy_threshold: 3
            healthy_threshold: 3
            http_health_check:
              path: /ready
      listeners:
      - name: SET_BY_EPIC
        value: |
          name: {{.PortName}}
          address:
            socket_address:
              address: 0.0.0.0
              port_value: {{.Port}}
              protocol: {{.Protocol | ToUpper}}
          filter_chains:
            - filters:
              - name: envoy.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  stat_prefix: {{ .ServiceName }}
                  route_config:
                    name: local_route
                    virtual_hosts:
                      {{- range $j, $rt := .Routes}}
                      - name: {{ $rt.Name }}
                        domains: ["*"]
                        routes:
                          - match:
                              prefix: "/"
                            route:
                              weighted_clusters:
                                total_weight: {{ $.TotalWeight }}
                                clusters:
                                {{- range $r, $rule := $rt.Spec.HTTP.Rules}}
                                {{- range $i, $cl := $rule.BackendRefs}}
                                - name: {{ $cl.Name }}
                                  weight: {{ $.ClusterWeight }}
                                {{- end}}
                                {{- end}}
                      {{- end}}
                  http_filters:
                    - name: envoy.filters.http.router
    nodeID: SET_BY_EPIC
    serialization: yaml
  gateway:
    gatewayClassName: gatewayhttp
    listeners:
    - name: web
      protocol: TCP
      port: 8088
  public-address: 192.168.79.2
  public-ports:
  - port: 8088
    protocol: TCP
    targetPort: 0
